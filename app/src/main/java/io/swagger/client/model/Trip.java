/**
 * Reseplaneraren
 * Provides access to Västtrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.Leg;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Trip {
  
  @SerializedName("Leg")
  private List<Leg> leg = null;
  @SerializedName("travelWarranty")
  private Boolean travelWarranty = null;
  @SerializedName("valid")
  private Boolean valid = null;
  @SerializedName("alternative")
  private Boolean alternative = null;
  public enum TypeEnum {
     WALK,  BIKE,  CAR, 
  };
  @SerializedName("type")
  private TypeEnum type = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public List<Leg> getLeg() {
    return leg;
  }
  public void setLeg(List<Leg> leg) {
    this.leg = leg;
  }

  /**
   * IMPORTANT NOTE: journeys that are presented when the default change margin has been disregarded are not covered by V�sttrafiks travel warranty (Swedish: resegaranti).
   **/
  @ApiModelProperty(value = "IMPORTANT NOTE: journeys that are presented when the default change margin has been disregarded are not covered by V�sttrafiks travel warranty (Swedish: resegaranti).")
  public Boolean getTravelWarranty() {
    return travelWarranty;
  }
  public void setTravelWarranty(Boolean travelWarranty) {
    this.travelWarranty = travelWarranty;
  }

  /**
   * The state indicates if the trip is still possible to ride based on the current realtime situation
   **/
  @ApiModelProperty(value = "The state indicates if the trip is still possible to ride based on the current realtime situation")
  public Boolean getValid() {
    return valid;
  }
  public void setValid(Boolean valid) {
    this.valid = valid;
  }

  /**
   * The type indicates whether this is an original connection or an realtime alternative
   **/
  @ApiModelProperty(required = true, value = "The type indicates whether this is an original connection or an realtime alternative")
  public Boolean getAlternative() {
    return alternative;
  }
  public void setAlternative(Boolean alternative) {
    this.alternative = alternative;
  }

  /**
   * Type of trip
   **/
  @ApiModelProperty(value = "Type of trip")
  public TypeEnum getType() {
    return type;
  }
  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trip trip = (Trip) o;
    return (this.leg == null ? trip.leg == null : this.leg.equals(trip.leg)) &&
        (this.travelWarranty == null ? trip.travelWarranty == null : this.travelWarranty.equals(trip.travelWarranty)) &&
        (this.valid == null ? trip.valid == null : this.valid.equals(trip.valid)) &&
        (this.alternative == null ? trip.alternative == null : this.alternative.equals(trip.alternative)) &&
        (this.type == null ? trip.type == null : this.type.equals(trip.type));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.leg == null ? 0: this.leg.hashCode());
    result = 31 * result + (this.travelWarranty == null ? 0: this.travelWarranty.hashCode());
    result = 31 * result + (this.valid == null ? 0: this.valid.hashCode());
    result = 31 * result + (this.alternative == null ? 0: this.alternative.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trip {\n");
    
    sb.append("  leg: ").append(leg).append("\n");
    sb.append("  travelWarranty: ").append(travelWarranty).append("\n");
    sb.append("  valid: ").append(valid).append("\n");
    sb.append("  alternative: ").append(alternative).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
