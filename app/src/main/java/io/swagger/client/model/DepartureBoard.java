/**
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.Departure;
import java.util.*;
import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class DepartureBoard {
  
  @SerializedName("errorText")
  private String errorText = null;
  @SerializedName("Departure")
  private List<Departure> departure = null;
  @SerializedName("error")
  private String error = null;
  @SerializedName("serverdate")
  private Date serverdate = null;
  @SerializedName("servertime")
  private String servertime = null;
  @SerializedName("noNamespaceSchemaLocation")
  private String noNamespaceSchemaLocation = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public String getErrorText() {
    return errorText;
  }
  public void setErrorText(String errorText) {
    this.errorText = errorText;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<Departure> getDeparture() {
    return departure;
  }
  public void setDeparture(List<Departure> departure) {
    this.departure = departure;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getError() {
    return error;
  }
  public void setError(String error) {
    this.error = error;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Date getServerdate() {
    return serverdate;
  }
  public void setServerdate(Date serverdate) {
    this.serverdate = serverdate;
  }

  /**
   * Current server time in format HH:MM
   **/
  @ApiModelProperty(value = "Current server time in format HH:MM")
  public String getServertime() {
    return servertime;
  }
  public void setServertime(String servertime) {
    this.servertime = servertime;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public String getNoNamespaceSchemaLocation() {
    return noNamespaceSchemaLocation;
  }
  public void setNoNamespaceSchemaLocation(String noNamespaceSchemaLocation) {
    this.noNamespaceSchemaLocation = noNamespaceSchemaLocation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepartureBoard departureBoard = (DepartureBoard) o;
    return (this.errorText == null ? departureBoard.errorText == null : this.errorText.equals(departureBoard.errorText)) &&
        (this.departure == null ? departureBoard.departure == null : this.departure.equals(departureBoard.departure)) &&
        (this.error == null ? departureBoard.error == null : this.error.equals(departureBoard.error)) &&
        (this.serverdate == null ? departureBoard.serverdate == null : this.serverdate.equals(departureBoard.serverdate)) &&
        (this.servertime == null ? departureBoard.servertime == null : this.servertime.equals(departureBoard.servertime)) &&
        (this.noNamespaceSchemaLocation == null ? departureBoard.noNamespaceSchemaLocation == null : this.noNamespaceSchemaLocation.equals(departureBoard.noNamespaceSchemaLocation));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.errorText == null ? 0: this.errorText.hashCode());
    result = 31 * result + (this.departure == null ? 0: this.departure.hashCode());
    result = 31 * result + (this.error == null ? 0: this.error.hashCode());
    result = 31 * result + (this.serverdate == null ? 0: this.serverdate.hashCode());
    result = 31 * result + (this.servertime == null ? 0: this.servertime.hashCode());
    result = 31 * result + (this.noNamespaceSchemaLocation == null ? 0: this.noNamespaceSchemaLocation.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepartureBoard {\n");
    
    sb.append("  errorText: ").append(errorText).append("\n");
    sb.append("  departure: ").append(departure).append("\n");
    sb.append("  error: ").append(error).append("\n");
    sb.append("  serverdate: ").append(serverdate).append("\n");
    sb.append("  servertime: ").append(servertime).append("\n");
    sb.append("  noNamespaceSchemaLocation: ").append(noNamespaceSchemaLocation).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
