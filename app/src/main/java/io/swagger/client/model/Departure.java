/**
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.JourneyDetailRef;
import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Departure {
  
  @SerializedName("fgColor")
  private String fgColor = null;
  @SerializedName("stop")
  private String stop = null;
  @SerializedName("booking")
  private Boolean booking = null;
  @SerializedName("direction")
  private String direction = null;
  @SerializedName("JourneyDetailRef")
  private JourneyDetailRef journeyDetailRef = null;
  @SerializedName("track")
  private String track = null;
  @SerializedName("rtTrack")
  private String rtTrack = null;
  @SerializedName("sname")
  private String sname = null;
  @SerializedName("type")
  private String type = null;
  @SerializedName("date")
  private Date date = null;
  @SerializedName("bgColor")
  private String bgColor = null;
  @SerializedName("stroke")
  private String stroke = null;
  @SerializedName("rtDate")
  private Date rtDate = null;
  @SerializedName("time")
  private String time = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("rtTime")
  private String rtTime = null;
  @SerializedName("night")
  private Boolean night = null;
  @SerializedName("stopid")
  private String stopid = null;
  @SerializedName("journeyid")
  private String journeyid = null;
  public enum AccessibilityEnum {
     wheelChair,  lowFloor, 
  };
  @SerializedName("accessibility")
  private AccessibilityEnum accessibility = null;

  /**
   * Foregroundcolor of this line
   **/
  @ApiModelProperty(required = true, value = "Foregroundcolor of this line")
  public String getFgColor() {
    return fgColor;
  }
  public void setFgColor(String fgColor) {
    this.fgColor = fgColor;
  }

  /**
   * Contains the name of the stop/station
   **/
  @ApiModelProperty(required = true, value = "Contains the name of the stop/station")
  public String getStop() {
    return stop;
  }
  public void setStop(String stop) {
    this.stop = stop;
  }

  /**
   * Will be true if this journey needs to be booked
   **/
  @ApiModelProperty(value = "Will be true if this journey needs to be booked")
  public Boolean getBooking() {
    return booking;
  }
  public void setBooking(Boolean booking) {
    this.booking = booking;
  }

  /**
   * Direction information
   **/
  @ApiModelProperty(required = true, value = "Direction information")
  public String getDirection() {
    return direction;
  }
  public void setDirection(String direction) {
    this.direction = direction;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public JourneyDetailRef getJourneyDetailRef() {
    return journeyDetailRef;
  }
  public void setJourneyDetailRef(JourneyDetailRef journeyDetailRef) {
    this.journeyDetailRef = journeyDetailRef;
  }

  /**
   * Track information, if available
   **/
  @ApiModelProperty(required = true, value = "Track information, if available")
  public String getTrack() {
    return track;
  }
  public void setTrack(String track) {
    this.track = track;
  }

  /**
   * Realtime track information, if available
   **/
  @ApiModelProperty(value = "Realtime track information, if available")
  public String getRtTrack() {
    return rtTrack;
  }
  public void setRtTrack(String rtTrack) {
    this.rtTrack = rtTrack;
  }

  /**
   * Short name of the leg
   **/
  @ApiModelProperty(required = true, value = "Short name of the leg")
  public String getSname() {
    return sname;
  }
  public void setSname(String sname) {
    this.sname = sname;
  }

  /**
   * The attribute type specifies the type of the departing journey. Valid values are VAS, LDT (Long Distance Train), REG (Regional train), BUS , BOAT, TRAM, TAXI (Taxi/Telebus)
   **/
  @ApiModelProperty(required = true, value = "The attribute type specifies the type of the departing journey. Valid values are VAS, LDT (Long Distance Train), REG (Regional train), BUS , BOAT, TRAM, TAXI (Taxi/Telebus)")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }

  /**
   * Date in format YYYY-MM-DD
   **/
  @ApiModelProperty(required = true, value = "Date in format YYYY-MM-DD")
  public Date getDate() {
    return date;
  }
  public void setDate(Date date) {
    this.date = date;
  }

  /**
   * Backgroundcolor of this line
   **/
  @ApiModelProperty(required = true, value = "Backgroundcolor of this line")
  public String getBgColor() {
    return bgColor;
  }
  public void setBgColor(String bgColor) {
    this.bgColor = bgColor;
  }

  /**
   * Stroke style of this line
   **/
  @ApiModelProperty(required = true, value = "Stroke style of this line")
  public String getStroke() {
    return stroke;
  }
  public void setStroke(String stroke) {
    this.stroke = stroke;
  }

  /**
   * Realtime date in format YYYY-MM-DD, if available
   **/
  @ApiModelProperty(required = true, value = "Realtime date in format YYYY-MM-DD, if available")
  public Date getRtDate() {
    return rtDate;
  }
  public void setRtDate(Date rtDate) {
    this.rtDate = rtDate;
  }

  /**
   * Time in format HH:MM
   **/
  @ApiModelProperty(required = true, value = "Time in format HH:MM")
  public String getTime() {
    return time;
  }
  public void setTime(String time) {
    this.time = time;
  }

  /**
   * The attribute name specifies the name of the departing journey
   **/
  @ApiModelProperty(required = true, value = "The attribute name specifies the name of the departing journey")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Realtime time in format HH:MM if available
   **/
  @ApiModelProperty(required = true, value = "Realtime time in format HH:MM if available")
  public String getRtTime() {
    return rtTime;
  }
  public void setRtTime(String rtTime) {
    this.rtTime = rtTime;
  }

  /**
   * Will be true if this journey is a night journey
   **/
  @ApiModelProperty(value = "Will be true if this journey is a night journey")
  public Boolean getNight() {
    return night;
  }
  public void setNight(Boolean night) {
    this.night = night;
  }

  /**
   * Contains the id of the stop/station
   **/
  @ApiModelProperty(required = true, value = "Contains the id of the stop/station")
  public String getStopid() {
    return stopid;
  }
  public void setStopid(String stopid) {
    this.stopid = stopid;
  }

  /**
   * Contains the id of the journey
   **/
  @ApiModelProperty(required = true, value = "Contains the id of the journey")
  public String getJourneyid() {
    return journeyid;
  }
  public void setJourneyid(String journeyid) {
    this.journeyid = journeyid;
  }

  /**
   * will only be set if the vehicle has wheelchair + ramp/lift or lowfloor according to realtime data
   **/
  @ApiModelProperty(required = true, value = "will only be set if the vehicle has wheelchair + ramp/lift or lowfloor according to realtime data")
  public AccessibilityEnum getAccessibility() {
    return accessibility;
  }
  public void setAccessibility(AccessibilityEnum accessibility) {
    this.accessibility = accessibility;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Departure departure = (Departure) o;
    return (this.fgColor == null ? departure.fgColor == null : this.fgColor.equals(departure.fgColor)) &&
        (this.stop == null ? departure.stop == null : this.stop.equals(departure.stop)) &&
        (this.booking == null ? departure.booking == null : this.booking.equals(departure.booking)) &&
        (this.direction == null ? departure.direction == null : this.direction.equals(departure.direction)) &&
        (this.journeyDetailRef == null ? departure.journeyDetailRef == null : this.journeyDetailRef.equals(departure.journeyDetailRef)) &&
        (this.track == null ? departure.track == null : this.track.equals(departure.track)) &&
        (this.rtTrack == null ? departure.rtTrack == null : this.rtTrack.equals(departure.rtTrack)) &&
        (this.sname == null ? departure.sname == null : this.sname.equals(departure.sname)) &&
        (this.type == null ? departure.type == null : this.type.equals(departure.type)) &&
        (this.date == null ? departure.date == null : this.date.equals(departure.date)) &&
        (this.bgColor == null ? departure.bgColor == null : this.bgColor.equals(departure.bgColor)) &&
        (this.stroke == null ? departure.stroke == null : this.stroke.equals(departure.stroke)) &&
        (this.rtDate == null ? departure.rtDate == null : this.rtDate.equals(departure.rtDate)) &&
        (this.time == null ? departure.time == null : this.time.equals(departure.time)) &&
        (this.name == null ? departure.name == null : this.name.equals(departure.name)) &&
        (this.rtTime == null ? departure.rtTime == null : this.rtTime.equals(departure.rtTime)) &&
        (this.night == null ? departure.night == null : this.night.equals(departure.night)) &&
        (this.stopid == null ? departure.stopid == null : this.stopid.equals(departure.stopid)) &&
        (this.journeyid == null ? departure.journeyid == null : this.journeyid.equals(departure.journeyid)) &&
        (this.accessibility == null ? departure.accessibility == null : this.accessibility.equals(departure.accessibility));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.fgColor == null ? 0: this.fgColor.hashCode());
    result = 31 * result + (this.stop == null ? 0: this.stop.hashCode());
    result = 31 * result + (this.booking == null ? 0: this.booking.hashCode());
    result = 31 * result + (this.direction == null ? 0: this.direction.hashCode());
    result = 31 * result + (this.journeyDetailRef == null ? 0: this.journeyDetailRef.hashCode());
    result = 31 * result + (this.track == null ? 0: this.track.hashCode());
    result = 31 * result + (this.rtTrack == null ? 0: this.rtTrack.hashCode());
    result = 31 * result + (this.sname == null ? 0: this.sname.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.date == null ? 0: this.date.hashCode());
    result = 31 * result + (this.bgColor == null ? 0: this.bgColor.hashCode());
    result = 31 * result + (this.stroke == null ? 0: this.stroke.hashCode());
    result = 31 * result + (this.rtDate == null ? 0: this.rtDate.hashCode());
    result = 31 * result + (this.time == null ? 0: this.time.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.rtTime == null ? 0: this.rtTime.hashCode());
    result = 31 * result + (this.night == null ? 0: this.night.hashCode());
    result = 31 * result + (this.stopid == null ? 0: this.stopid.hashCode());
    result = 31 * result + (this.journeyid == null ? 0: this.journeyid.hashCode());
    result = 31 * result + (this.accessibility == null ? 0: this.accessibility.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Departure {\n");
    
    sb.append("  fgColor: ").append(fgColor).append("\n");
    sb.append("  stop: ").append(stop).append("\n");
    sb.append("  booking: ").append(booking).append("\n");
    sb.append("  direction: ").append(direction).append("\n");
    sb.append("  journeyDetailRef: ").append(journeyDetailRef).append("\n");
    sb.append("  track: ").append(track).append("\n");
    sb.append("  rtTrack: ").append(rtTrack).append("\n");
    sb.append("  sname: ").append(sname).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  date: ").append(date).append("\n");
    sb.append("  bgColor: ").append(bgColor).append("\n");
    sb.append("  stroke: ").append(stroke).append("\n");
    sb.append("  rtDate: ").append(rtDate).append("\n");
    sb.append("  time: ").append(time).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  rtTime: ").append(rtTime).append("\n");
    sb.append("  night: ").append(night).append("\n");
    sb.append("  stopid: ").append(stopid).append("\n");
    sb.append("  journeyid: ").append(journeyid).append("\n");
    sb.append("  accessibility: ").append(accessibility).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
