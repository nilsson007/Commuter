/**
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.Destination;
import io.swagger.client.model.GeometryRef;
import io.swagger.client.model.JourneyDetailRef;
import io.swagger.client.model.Notes;
import io.swagger.client.model.Origin;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Leg {
  
  @SerializedName("fgColor")
  private String fgColor = null;
  @SerializedName("booking")
  private Boolean booking = null;
  @SerializedName("direction")
  private String direction = null;
  @SerializedName("JourneyDetailRef")
  private JourneyDetailRef journeyDetailRef = null;
  @SerializedName("cancelled")
  private Boolean cancelled = null;
  @SerializedName("kcal")
  private Float kcal = null;
  @SerializedName("Origin")
  private Origin origin = null;
  @SerializedName("sname")
  private String sname = null;
  @SerializedName("type")
  private String type = null;
  @SerializedName("GeometryRef")
  private GeometryRef geometryRef = null;
  @SerializedName("bgColor")
  private String bgColor = null;
  @SerializedName("Notes")
  private Notes notes = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("stroke")
  private String stroke = null;
  @SerializedName("reachable")
  private Boolean reachable = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("night")
  private Boolean night = null;
  @SerializedName("Destination")
  private Destination destination = null;
  @SerializedName("percentBikeRoad")
  private Float percentBikeRoad = null;
  @SerializedName("accessibility")
  private String accessibility = null;

  /**
   * Foregroundcolor of this line
   **/
  @ApiModelProperty(value = "Foregroundcolor of this line")
  public String getFgColor() {
    return fgColor;
  }
  public void setFgColor(String fgColor) {
    this.fgColor = fgColor;
  }

  /**
   * Will be true if this journey needs to be booked
   **/
  @ApiModelProperty(value = "Will be true if this journey needs to be booked")
  public Boolean getBooking() {
    return booking;
  }
  public void setBooking(Boolean booking) {
    this.booking = booking;
  }

  /**
   * Direction information
   **/
  @ApiModelProperty(value = "Direction information")
  public String getDirection() {
    return direction;
  }
  public void setDirection(String direction) {
    this.direction = direction;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public JourneyDetailRef getJourneyDetailRef() {
    return journeyDetailRef;
  }
  public void setJourneyDetailRef(JourneyDetailRef journeyDetailRef) {
    this.journeyDetailRef = journeyDetailRef;
  }

  /**
   * Will be true if this journey is cancelled
   **/
  @ApiModelProperty(value = "Will be true if this journey is cancelled")
  public Boolean getCancelled() {
    return cancelled;
  }
  public void setCancelled(Boolean cancelled) {
    this.cancelled = cancelled;
  }

  /**
   * Energy use
   **/
  @ApiModelProperty(value = "Energy use")
  public Float getKcal() {
    return kcal;
  }
  public void setKcal(Float kcal) {
    this.kcal = kcal;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Origin getOrigin() {
    return origin;
  }
  public void setOrigin(Origin origin) {
    this.origin = origin;
  }

  /**
   * Short name of the leg
   **/
  @ApiModelProperty(value = "Short name of the leg")
  public String getSname() {
    return sname;
  }
  public void setSname(String sname) {
    this.sname = sname;
  }

  /**
   * The attribute type specifies the type of the leg. Valid values are VAS, LDT (Long Distance Train), REG (Regional train), BUS , BOAT, TRAM, TAXI (Taxi/Telebus). Furthermore it can be of type WALK, BIKE and CAR if these legs are routes on the street network
   **/
  @ApiModelProperty(required = true, value = "The attribute type specifies the type of the leg. Valid values are VAS, LDT (Long Distance Train), REG (Regional train), BUS , BOAT, TRAM, TAXI (Taxi/Telebus). Furthermore it can be of type WALK, BIKE and CAR if these legs are routes on the street network")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public GeometryRef getGeometryRef() {
    return geometryRef;
  }
  public void setGeometryRef(GeometryRef geometryRef) {
    this.geometryRef = geometryRef;
  }

  /**
   * Backgroundcolor of this line
   **/
  @ApiModelProperty(value = "Backgroundcolor of this line")
  public String getBgColor() {
    return bgColor;
  }
  public void setBgColor(String bgColor) {
    this.bgColor = bgColor;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Notes getNotes() {
    return notes;
  }
  public void setNotes(Notes notes) {
    this.notes = notes;
  }

  /**
   * ID of the journey
   **/
  @ApiModelProperty(value = "ID of the journey")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * Stroke style of this line
   **/
  @ApiModelProperty(value = "Stroke style of this line")
  public String getStroke() {
    return stroke;
  }
  public void setStroke(String stroke) {
    this.stroke = stroke;
  }

  /**
   * Will be true if this journey is not reachable due to delay of the feeder
   **/
  @ApiModelProperty(value = "Will be true if this journey is not reachable due to delay of the feeder")
  public Boolean getReachable() {
    return reachable;
  }
  public void setReachable(Boolean reachable) {
    this.reachable = reachable;
  }

  /**
   * The attribute name specifies the name of the leg
   **/
  @ApiModelProperty(required = true, value = "The attribute name specifies the name of the leg")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Will be true if this journey is a night journey
   **/
  @ApiModelProperty(value = "Will be true if this journey is a night journey")
  public Boolean getNight() {
    return night;
  }
  public void setNight(Boolean night) {
    this.night = night;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Destination getDestination() {
    return destination;
  }
  public void setDestination(Destination destination) {
    this.destination = destination;
  }

  /**
   * Percentage of the route that is made up of bike roads
   **/
  @ApiModelProperty(value = "Percentage of the route that is made up of bike roads")
  public Float getPercentBikeRoad() {
    return percentBikeRoad;
  }
  public void setPercentBikeRoad(Float percentBikeRoad) {
    this.percentBikeRoad = percentBikeRoad;
  }

  /**
   * will only be set if the vehicle has wheelchair + ramp/lift or lowfloor according to realtime data
   **/
  @ApiModelProperty(value = "will only be set if the vehicle has wheelchair + ramp/lift or lowfloor according to realtime data")
  public String getAccessibility() {
    return accessibility;
  }
  public void setAccessibility(String accessibility) {
    this.accessibility = accessibility;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Leg leg = (Leg) o;
    return (this.fgColor == null ? leg.fgColor == null : this.fgColor.equals(leg.fgColor)) &&
        (this.booking == null ? leg.booking == null : this.booking.equals(leg.booking)) &&
        (this.direction == null ? leg.direction == null : this.direction.equals(leg.direction)) &&
        (this.journeyDetailRef == null ? leg.journeyDetailRef == null : this.journeyDetailRef.equals(leg.journeyDetailRef)) &&
        (this.cancelled == null ? leg.cancelled == null : this.cancelled.equals(leg.cancelled)) &&
        (this.kcal == null ? leg.kcal == null : this.kcal.equals(leg.kcal)) &&
        (this.origin == null ? leg.origin == null : this.origin.equals(leg.origin)) &&
        (this.sname == null ? leg.sname == null : this.sname.equals(leg.sname)) &&
        (this.type == null ? leg.type == null : this.type.equals(leg.type)) &&
        (this.geometryRef == null ? leg.geometryRef == null : this.geometryRef.equals(leg.geometryRef)) &&
        (this.bgColor == null ? leg.bgColor == null : this.bgColor.equals(leg.bgColor)) &&
        (this.notes == null ? leg.notes == null : this.notes.equals(leg.notes)) &&
        (this.id == null ? leg.id == null : this.id.equals(leg.id)) &&
        (this.stroke == null ? leg.stroke == null : this.stroke.equals(leg.stroke)) &&
        (this.reachable == null ? leg.reachable == null : this.reachable.equals(leg.reachable)) &&
        (this.name == null ? leg.name == null : this.name.equals(leg.name)) &&
        (this.night == null ? leg.night == null : this.night.equals(leg.night)) &&
        (this.destination == null ? leg.destination == null : this.destination.equals(leg.destination)) &&
        (this.percentBikeRoad == null ? leg.percentBikeRoad == null : this.percentBikeRoad.equals(leg.percentBikeRoad)) &&
        (this.accessibility == null ? leg.accessibility == null : this.accessibility.equals(leg.accessibility));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.fgColor == null ? 0: this.fgColor.hashCode());
    result = 31 * result + (this.booking == null ? 0: this.booking.hashCode());
    result = 31 * result + (this.direction == null ? 0: this.direction.hashCode());
    result = 31 * result + (this.journeyDetailRef == null ? 0: this.journeyDetailRef.hashCode());
    result = 31 * result + (this.cancelled == null ? 0: this.cancelled.hashCode());
    result = 31 * result + (this.kcal == null ? 0: this.kcal.hashCode());
    result = 31 * result + (this.origin == null ? 0: this.origin.hashCode());
    result = 31 * result + (this.sname == null ? 0: this.sname.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.geometryRef == null ? 0: this.geometryRef.hashCode());
    result = 31 * result + (this.bgColor == null ? 0: this.bgColor.hashCode());
    result = 31 * result + (this.notes == null ? 0: this.notes.hashCode());
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.stroke == null ? 0: this.stroke.hashCode());
    result = 31 * result + (this.reachable == null ? 0: this.reachable.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.night == null ? 0: this.night.hashCode());
    result = 31 * result + (this.destination == null ? 0: this.destination.hashCode());
    result = 31 * result + (this.percentBikeRoad == null ? 0: this.percentBikeRoad.hashCode());
    result = 31 * result + (this.accessibility == null ? 0: this.accessibility.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Leg {\n");
    
    sb.append("  fgColor: ").append(fgColor).append("\n");
    sb.append("  booking: ").append(booking).append("\n");
    sb.append("  direction: ").append(direction).append("\n");
    sb.append("  journeyDetailRef: ").append(journeyDetailRef).append("\n");
    sb.append("  cancelled: ").append(cancelled).append("\n");
    sb.append("  kcal: ").append(kcal).append("\n");
    sb.append("  origin: ").append(origin).append("\n");
    sb.append("  sname: ").append(sname).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  geometryRef: ").append(geometryRef).append("\n");
    sb.append("  bgColor: ").append(bgColor).append("\n");
    sb.append("  notes: ").append(notes).append("\n");
    sb.append("  id: ").append(id).append("\n");
    sb.append("  stroke: ").append(stroke).append("\n");
    sb.append("  reachable: ").append(reachable).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  night: ").append(night).append("\n");
    sb.append("  destination: ").append(destination).append("\n");
    sb.append("  percentBikeRoad: ").append(percentBikeRoad).append("\n");
    sb.append("  accessibility: ").append(accessibility).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
