/**
 * Reseplaneraren
 * Provides access to Västtrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.util.Date;
import io.swagger.client.model.TripList;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TripApi {
  String basePath = "https://api.vasttrafik.se/bin/rest.exe/v2";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Calculates a trip from a specified origin to a specified destination.
  * Calculates a trip from a specified origin to a specified destination. These might be stop/station IDs or coordinates based on addresses and points of interest validated by the location service or coordinates freely defined by the client. Parameters specifying both origin and destination are mandatory in calls to the trip service. When specifying a stop as origin, the parameter originId is used, while originCoordLat, originCoordLong, and originCoordName are used to specify a (named) coordinate. For the destination, the corresponding parameters are named either destId or destCoordLat, destCoordLong and destCoordName. It is also possible to define a via-stop/station. This forces the journey planner to search for trips which pass the defined station. The parameter is called viaId. When searching for a trip that goes via a coordinate, rather than a stop, two separate trip requests need to be combined into one.
   * @param originId origin stop id
   * @param originCoordLat origin latitude of center coordinate in the WGS84 system
   * @param originCoordLong origin longitude of center coordinate in the WGS84 system
   * @param originCoordName name of the address at the specified origin coordinate
   * @param destId destination stop id
   * @param destCoordLat destination latitude of center coordinate in the WGS84 system
   * @param destCoordLong destination longitude of center coordinate in the WGS84 system
   * @param destCoordName name of the address at the specified destination coordinate
   * @param viaId via stop/station id
   * @param date date of the trip
   * @param time time of the trip in format HH:MM
   * @param searchForArrival to specify that the given time and date is not the departure time but the latest time to arrive at the destination, set this parameter to the value 1.
   * @param useVas to exclude trips with Västtågen, set this parameter to 0.
   * @param useLDTrain to exclude trips with long distance trains, set this parameter to 0.
   * @param useRegTrain to exclude trips with regional trains, set this parameter to 0.
   * @param useBus to exclude trips with buses, set this parameter to 0.
   * @param useMedical to include medical transport lines trips with buses, set this parameter to 1.
   * @param originMedicalCon to search for medical transport connections from the origin, set this parameter to 1.
   * @param destMedicalCon to search for medical transport connections from the destination, set this parameter to 1.
   * @param wheelChairSpace to search for trips where at least one wheelchair space is present in the vehicle, set this parameter to 1.
   * @param strollerSpace to search for trips with space for stroller, baby carriage or rollator in the vehicle, set this parameter to 1.
   * @param lowFloor to search for trips where the vehicle is equipped with a low floor section, but not necessarily a ramp or lift, set this parameter to 1.
   * @param rampOrLift to search for trips where the vehicle is equipped with ramp or lift that allows fully barrier-free boarding and alighting, set this parameter to 1.
   * @param useBoat to exclude trips with boats, set this parameter to 0.
   * @param useTram to exclude trips with trams, set this parameter to 0.
   * @param usePT to exclude trips with public transportation, set this parameter to 0.
   * @param excludeDR to exclude journeys which require tel. registration, set this parameter to 1.
   * @param maxWalkDist maximum walking distance from/to the coordinate in meters
   * @param walkSpeed walking speed given in percent of normal speed
   * @param originWalk to exclude trips with walks from/to coordinates, set this to 0
   * @param destWalk to exclude trips with walks from/to coordinates, set this to 0
   * @param onlyWalk to search for walk-only trips, set this to 1
   * @param originBike to search for trips with a bike ride from the origin to a nearby stop, where the journey continues using public transport, set this to 1.
   * @param maxBikeDist maximum biking distance from/to the coordinate in meters
   * @param bikeCriterion optimize for either the fastest route or a route that is made up of a larger percentage of bike road, where &#39;F&#39; is used to indicate tha fastest route with mimimized travel time, and &#39;D&#39; is used to indicate dedicated bike roads to maximize use of bike roads.
   * @param bikeProfile determines the altitude profile of the route, based on a setting for how fast the user can bike when it is steep, where &#39;E&#39; is used to indicate easy with minimized steepnes, &#39;N&#39; is used to indicate normal, and &#39;P&#39; is used to indicate powerful to allow more steepness.
   * @param onlyBike to search for bike-only trips, set this to 1
   * @param originCar to search for trips where customer travels by car from the origin and is dropped off at a stop to continue the trip using public transport, set this to 1.
   * @param originCarWithParking to search for trips where the customer travels by car from the origin, parks at a commuter parking and walks to a nearby stop to continue the trip using public transport, set this to 1.
   * @param maxCarDist maximum car distance from/to the coordinate in meters
   * @param onlyCar to search for car-only trips, set this to 1
   * @param maxChanges maximum number of changes in the trip
   * @param additionalChangeTime to prolong the minimal change times in minutes between the public transport legs of the returned journeys
   * @param disregardDefaultChangeMargin to ignore the default change margin, set this to 1
   * @param needJourneyDetail if the reference URL for the journey detail service is not needed in the re, set this to 0
   * @param needGeo if a reference link for each leg of the resulting trips, which can be used to request the geometry, is needed, set this to 1
   * @param needItinerary if a reference link for each leg of the resulting trips, which can be used to request the itinerary, is needed, set this to 1
   * @param numTrips the number of trips in the returned result
   * @param format the required response format
   * @param jsonpCallback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
   * @return TripList
  */
  public TripList getTrip (Long originId, Double originCoordLat, Double originCoordLong, String originCoordName, Long destId, Double destCoordLat, Double destCoordLong, String destCoordName, Long viaId, Date date, String time, String searchForArrival, String useVas, String useLDTrain, String useRegTrain, String useBus, String useMedical, String originMedicalCon, String destMedicalCon, String wheelChairSpace, String strollerSpace, String lowFloor, String rampOrLift, String useBoat, String useTram, String usePT, String excludeDR, Integer maxWalkDist, String walkSpeed, String originWalk, String destWalk, String onlyWalk, String originBike, Integer maxBikeDist, String bikeCriterion, String bikeProfile, String onlyBike, String originCar, String originCarWithParking, Integer maxCarDist, String onlyCar, Integer maxChanges, Integer additionalChangeTime, String disregardDefaultChangeMargin, String needJourneyDetail, String needGeo, String needItinerary, Integer numTrips, String format, String jsonpCallback) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/trip";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originId", originId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originCoordLat", originCoordLat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originCoordLong", originCoordLong));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originCoordName", originCoordName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destId", destId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destCoordLat", destCoordLat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destCoordLong", destCoordLong));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destCoordName", destCoordName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "viaId", viaId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time", time));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "searchForArrival", searchForArrival));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useVas", useVas));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useLDTrain", useLDTrain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useRegTrain", useRegTrain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useBus", useBus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useMedical", useMedical));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originMedicalCon", originMedicalCon));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destMedicalCon", destMedicalCon));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wheelChairSpace", wheelChairSpace));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "strollerSpace", strollerSpace));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lowFloor", lowFloor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rampOrLift", rampOrLift));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useBoat", useBoat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useTram", useTram));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "usePT", usePT));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludeDR", excludeDR));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxWalkDist", maxWalkDist));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walkSpeed", walkSpeed));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originWalk", originWalk));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destWalk", destWalk));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "onlyWalk", onlyWalk));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originBike", originBike));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxBikeDist", maxBikeDist));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bikeCriterion", bikeCriterion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bikeProfile", bikeProfile));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "onlyBike", onlyBike));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originCar", originCar));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originCarWithParking", originCarWithParking));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxCarDist", maxCarDist));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "onlyCar", onlyCar));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxChanges", maxChanges));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "additionalChangeTime", additionalChangeTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disregardDefaultChangeMargin", disregardDefaultChangeMargin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "needJourneyDetail", needJourneyDetail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "needGeo", needGeo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "needItinerary", needItinerary));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "numTrips", numTrips));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jsonpCallback", jsonpCallback));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TripList) ApiInvoker.deserialize(localVarResponse, "", TripList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Calculates a trip from a specified origin to a specified destination.
   * Calculates a trip from a specified origin to a specified destination. These might be stop/station IDs or coordinates based on addresses and points of interest validated by the location service or coordinates freely defined by the client. Parameters specifying both origin and destination are mandatory in calls to the trip service. When specifying a stop as origin, the parameter originId is used, while originCoordLat, originCoordLong, and originCoordName are used to specify a (named) coordinate. For the destination, the corresponding parameters are named either destId or destCoordLat, destCoordLong and destCoordName. It is also possible to define a via-stop/station. This forces the journey planner to search for trips which pass the defined station. The parameter is called viaId. When searching for a trip that goes via a coordinate, rather than a stop, two separate trip requests need to be combined into one.
   * @param originId origin stop id   * @param originCoordLat origin latitude of center coordinate in the WGS84 system   * @param originCoordLong origin longitude of center coordinate in the WGS84 system   * @param originCoordName name of the address at the specified origin coordinate   * @param destId destination stop id   * @param destCoordLat destination latitude of center coordinate in the WGS84 system   * @param destCoordLong destination longitude of center coordinate in the WGS84 system   * @param destCoordName name of the address at the specified destination coordinate   * @param viaId via stop/station id   * @param date date of the trip   * @param time time of the trip in format HH:MM   * @param searchForArrival to specify that the given time and date is not the departure time but the latest time to arrive at the destination, set this parameter to the value 1.   * @param useVas to exclude trips with Västtågen, set this parameter to 0.   * @param useLDTrain to exclude trips with long distance trains, set this parameter to 0.   * @param useRegTrain to exclude trips with regional trains, set this parameter to 0.   * @param useBus to exclude trips with buses, set this parameter to 0.   * @param useMedical to include medical transport lines trips with buses, set this parameter to 1.   * @param originMedicalCon to search for medical transport connections from the origin, set this parameter to 1.   * @param destMedicalCon to search for medical transport connections from the destination, set this parameter to 1.   * @param wheelChairSpace to search for trips where at least one wheelchair space is present in the vehicle, set this parameter to 1.   * @param strollerSpace to search for trips with space for stroller, baby carriage or rollator in the vehicle, set this parameter to 1.   * @param lowFloor to search for trips where the vehicle is equipped with a low floor section, but not necessarily a ramp or lift, set this parameter to 1.   * @param rampOrLift to search for trips where the vehicle is equipped with ramp or lift that allows fully barrier-free boarding and alighting, set this parameter to 1.   * @param useBoat to exclude trips with boats, set this parameter to 0.   * @param useTram to exclude trips with trams, set this parameter to 0.   * @param usePT to exclude trips with public transportation, set this parameter to 0.   * @param excludeDR to exclude journeys which require tel. registration, set this parameter to 1.   * @param maxWalkDist maximum walking distance from/to the coordinate in meters   * @param walkSpeed walking speed given in percent of normal speed   * @param originWalk to exclude trips with walks from/to coordinates, set this to 0   * @param destWalk to exclude trips with walks from/to coordinates, set this to 0   * @param onlyWalk to search for walk-only trips, set this to 1   * @param originBike to search for trips with a bike ride from the origin to a nearby stop, where the journey continues using public transport, set this to 1.   * @param maxBikeDist maximum biking distance from/to the coordinate in meters   * @param bikeCriterion optimize for either the fastest route or a route that is made up of a larger percentage of bike road, where &#39;F&#39; is used to indicate tha fastest route with mimimized travel time, and &#39;D&#39; is used to indicate dedicated bike roads to maximize use of bike roads.   * @param bikeProfile determines the altitude profile of the route, based on a setting for how fast the user can bike when it is steep, where &#39;E&#39; is used to indicate easy with minimized steepnes, &#39;N&#39; is used to indicate normal, and &#39;P&#39; is used to indicate powerful to allow more steepness.   * @param onlyBike to search for bike-only trips, set this to 1   * @param originCar to search for trips where customer travels by car from the origin and is dropped off at a stop to continue the trip using public transport, set this to 1.   * @param originCarWithParking to search for trips where the customer travels by car from the origin, parks at a commuter parking and walks to a nearby stop to continue the trip using public transport, set this to 1.   * @param maxCarDist maximum car distance from/to the coordinate in meters   * @param onlyCar to search for car-only trips, set this to 1   * @param maxChanges maximum number of changes in the trip   * @param additionalChangeTime to prolong the minimal change times in minutes between the public transport legs of the returned journeys   * @param disregardDefaultChangeMargin to ignore the default change margin, set this to 1   * @param needJourneyDetail if the reference URL for the journey detail service is not needed in the re, set this to 0   * @param needGeo if a reference link for each leg of the resulting trips, which can be used to request the geometry, is needed, set this to 1   * @param needItinerary if a reference link for each leg of the resulting trips, which can be used to request the itinerary, is needed, set this to 1   * @param numTrips the number of trips in the returned result   * @param format the required response format   * @param jsonpCallback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
  */
  public void getTrip (Long originId, Double originCoordLat, Double originCoordLong, String originCoordName, Long destId, Double destCoordLat, Double destCoordLong, String destCoordName, Long viaId, Date date, String time, String searchForArrival, String useVas, String useLDTrain, String useRegTrain, String useBus, String useMedical, String originMedicalCon, String destMedicalCon, String wheelChairSpace, String strollerSpace, String lowFloor, String rampOrLift, String useBoat, String useTram, String usePT, String excludeDR, Integer maxWalkDist, String walkSpeed, String originWalk, String destWalk, String onlyWalk, String originBike, Integer maxBikeDist, String bikeCriterion, String bikeProfile, String onlyBike, String originCar, String originCarWithParking, Integer maxCarDist, String onlyCar, Integer maxChanges, Integer additionalChangeTime, String disregardDefaultChangeMargin, String needJourneyDetail, String needGeo, String needItinerary, Integer numTrips, String format, String jsonpCallback, final Response.Listener<TripList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/trip".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "originId", originId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originCoordLat", originCoordLat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originCoordLong", originCoordLong));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originCoordName", originCoordName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destId", destId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destCoordLat", destCoordLat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destCoordLong", destCoordLong));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destCoordName", destCoordName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "viaId", viaId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time", time));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "searchForArrival", searchForArrival));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useVas", useVas));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useLDTrain", useLDTrain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useRegTrain", useRegTrain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useBus", useBus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useMedical", useMedical));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originMedicalCon", originMedicalCon));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destMedicalCon", destMedicalCon));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wheelChairSpace", wheelChairSpace));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "strollerSpace", strollerSpace));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lowFloor", lowFloor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rampOrLift", rampOrLift));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useBoat", useBoat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useTram", useTram));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "usePT", usePT));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludeDR", excludeDR));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxWalkDist", maxWalkDist));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walkSpeed", walkSpeed));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originWalk", originWalk));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "destWalk", destWalk));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "onlyWalk", onlyWalk));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originBike", originBike));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxBikeDist", maxBikeDist));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bikeCriterion", bikeCriterion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bikeProfile", bikeProfile));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "onlyBike", onlyBike));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originCar", originCar));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "originCarWithParking", originCarWithParking));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxCarDist", maxCarDist));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "onlyCar", onlyCar));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxChanges", maxChanges));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "additionalChangeTime", additionalChangeTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disregardDefaultChangeMargin", disregardDefaultChangeMargin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "needJourneyDetail", needJourneyDetail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "needGeo", needGeo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "needItinerary", needItinerary));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "numTrips", numTrips));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jsonpCallback", jsonpCallback));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TripList) ApiInvoker.deserialize(localVarResponse,  "", TripList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
