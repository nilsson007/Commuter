/**
 * Reseplaneraren
 * Provides access to Västtrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.util.Date;
import io.swagger.client.model.DepartureBoard;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DepartureBoardApi {
  String basePath = "https://api.vasttrafik.se/bin/rest.exe/v2";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Return the next 20 departures (or less if not existing) from a given point in time or the next departures in a given timespan.
  * This method will return the next 20 departures (or less if not existing) from a given point in time or the next departures in a given timespan. The service can only be called for stops/stations by using according ID retrieved by the location method. The parameter is called id. The time and date are defined with the parameters date and time.
   * @param id stop id
   * @param date the date
   * @param time the time in format HH:MM
   * @param useVas to exclude trips with Västtågen, set this parameter to 0.
   * @param useLDTrain to exclude trips with long distance trains, set this parameter to 0.
   * @param useRegTrain to exclude trips with regional trains, set this parameter to 0.
   * @param useBus to exclude trips with buses, set this parameter to 0.
   * @param useBoat to exclude trips with boats, set this parameter to 0.
   * @param useTram to exclude trips with trams, set this parameter to 0.
   * @param excludeDR to exclude journeys which require tel. registration, set this parameter to 0.
   * @param timeSpan to get the next departures in a specified timespan of up to 24 hours (unit: minutes). If this parameter is not set, the result will contain the next 20 departures.
   * @param maxDeparturesPerLine if timeSpan is set you can further reduce the number of returned journeys by adding this parameter, which will cause only the given number of journeys for every combination of line and direction.
   * @param needJourneyDetail if the reference URL for the journey detail service is not needed in the result, set this parameter to 0
   * @param direction stop id in order to get only departures of vehicles with a specified direction
   * @param format the required response format
   * @param jsonpCallback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
   * @return DepartureBoard
  */
  public DepartureBoard getDepartureBoard (Long id, Date date, String time, String useVas, String useLDTrain, String useRegTrain, String useBus, String useBoat, String useTram, String excludeDR, Integer timeSpan, Integer maxDeparturesPerLine, String needJourneyDetail, Long direction, String format, String jsonpCallback) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getDepartureBoard",
        new ApiException(400, "Missing the required parameter 'id' when calling getDepartureBoard"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling getDepartureBoard",
        new ApiException(400, "Missing the required parameter 'date' when calling getDepartureBoard"));
    }
    // verify the required parameter 'time' is set
    if (time == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'time' when calling getDepartureBoard",
        new ApiException(400, "Missing the required parameter 'time' when calling getDepartureBoard"));
    }

    // create path and map variables
    String path = "/departureBoard";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time", time));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useVas", useVas));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useLDTrain", useLDTrain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useRegTrain", useRegTrain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useBus", useBus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useBoat", useBoat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useTram", useTram));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludeDR", excludeDR));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "timeSpan", timeSpan));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxDeparturesPerLine", maxDeparturesPerLine));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "needJourneyDetail", needJourneyDetail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "direction", direction));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jsonpCallback", jsonpCallback));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DepartureBoard) ApiInvoker.deserialize(localVarResponse, "", DepartureBoard.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Return the next 20 departures (or less if not existing) from a given point in time or the next departures in a given timespan.
   * This method will return the next 20 departures (or less if not existing) from a given point in time or the next departures in a given timespan. The service can only be called for stops/stations by using according ID retrieved by the location method. The parameter is called id. The time and date are defined with the parameters date and time.
   * @param id stop id   * @param date the date   * @param time the time in format HH:MM   * @param useVas to exclude trips with Västtågen, set this parameter to 0.   * @param useLDTrain to exclude trips with long distance trains, set this parameter to 0.   * @param useRegTrain to exclude trips with regional trains, set this parameter to 0.   * @param useBus to exclude trips with buses, set this parameter to 0.   * @param useBoat to exclude trips with boats, set this parameter to 0.   * @param useTram to exclude trips with trams, set this parameter to 0.   * @param excludeDR to exclude journeys which require tel. registration, set this parameter to 0.   * @param timeSpan to get the next departures in a specified timespan of up to 24 hours (unit: minutes). If this parameter is not set, the result will contain the next 20 departures.   * @param maxDeparturesPerLine if timeSpan is set you can further reduce the number of returned journeys by adding this parameter, which will cause only the given number of journeys for every combination of line and direction.   * @param needJourneyDetail if the reference URL for the journey detail service is not needed in the result, set this parameter to 0   * @param direction stop id in order to get only departures of vehicles with a specified direction   * @param format the required response format   * @param jsonpCallback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
  */
  public void getDepartureBoard (Long id, Date date, String time, String useVas, String useLDTrain, String useRegTrain, String useBus, String useBoat, String useTram, String excludeDR, Integer timeSpan, Integer maxDeparturesPerLine, String needJourneyDetail, Long direction, String format, String jsonpCallback, final Response.Listener<DepartureBoard> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getDepartureBoard",
        new ApiException(400, "Missing the required parameter 'id' when calling getDepartureBoard"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling getDepartureBoard",
        new ApiException(400, "Missing the required parameter 'date' when calling getDepartureBoard"));
    }
    // verify the required parameter 'time' is set
    if (time == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'time' when calling getDepartureBoard",
        new ApiException(400, "Missing the required parameter 'time' when calling getDepartureBoard"));
    }

    // create path and map variables
    String path = "/departureBoard".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time", time));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useVas", useVas));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useLDTrain", useLDTrain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useRegTrain", useRegTrain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useBus", useBus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useBoat", useBoat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useTram", useTram));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludeDR", excludeDR));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "timeSpan", timeSpan));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxDeparturesPerLine", maxDeparturesPerLine));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "needJourneyDetail", needJourneyDetail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "direction", direction));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jsonpCallback", jsonpCallback));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DepartureBoard) ApiInvoker.deserialize(localVarResponse,  "", DepartureBoard.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
