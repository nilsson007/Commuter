/**
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Arrival".equalsIgnoreCase(className)) {
      return new TypeToken<List<Arrival>>(){}.getType();
    }
    
    if ("ArrivalBoard".equalsIgnoreCase(className)) {
      return new TypeToken<List<ArrivalBoard>>(){}.getType();
    }
    
    if ("Color".equalsIgnoreCase(className)) {
      return new TypeToken<List<Color>>(){}.getType();
    }
    
    if ("CoordLocation".equalsIgnoreCase(className)) {
      return new TypeToken<List<CoordLocation>>(){}.getType();
    }
    
    if ("CreationDate".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreationDate>>(){}.getType();
    }
    
    if ("DateBegin".equalsIgnoreCase(className)) {
      return new TypeToken<List<DateBegin>>(){}.getType();
    }
    
    if ("DateEnd".equalsIgnoreCase(className)) {
      return new TypeToken<List<DateEnd>>(){}.getType();
    }
    
    if ("Departure".equalsIgnoreCase(className)) {
      return new TypeToken<List<Departure>>(){}.getType();
    }
    
    if ("DepartureBoard".equalsIgnoreCase(className)) {
      return new TypeToken<List<DepartureBoard>>(){}.getType();
    }
    
    if ("Destination".equalsIgnoreCase(className)) {
      return new TypeToken<List<Destination>>(){}.getType();
    }
    
    if ("Direction".equalsIgnoreCase(className)) {
      return new TypeToken<List<Direction>>(){}.getType();
    }
    
    if ("Geometry".equalsIgnoreCase(className)) {
      return new TypeToken<List<Geometry>>(){}.getType();
    }
    
    if ("GeometryRef".equalsIgnoreCase(className)) {
      return new TypeToken<List<GeometryRef>>(){}.getType();
    }
    
    if ("JourneyDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<JourneyDetail>>(){}.getType();
    }
    
    if ("JourneyDetailRef".equalsIgnoreCase(className)) {
      return new TypeToken<List<JourneyDetailRef>>(){}.getType();
    }
    
    if ("JourneyId".equalsIgnoreCase(className)) {
      return new TypeToken<List<JourneyId>>(){}.getType();
    }
    
    if ("JourneyName".equalsIgnoreCase(className)) {
      return new TypeToken<List<JourneyName>>(){}.getType();
    }
    
    if ("JourneyType".equalsIgnoreCase(className)) {
      return new TypeToken<List<JourneyType>>(){}.getType();
    }
    
    if ("Leg".equalsIgnoreCase(className)) {
      return new TypeToken<List<Leg>>(){}.getType();
    }
    
    if ("LiveMap".equalsIgnoreCase(className)) {
      return new TypeToken<List<LiveMap>>(){}.getType();
    }
    
    if ("LocationList".equalsIgnoreCase(className)) {
      return new TypeToken<List<LocationList>>(){}.getType();
    }
    
    if ("Note".equalsIgnoreCase(className)) {
      return new TypeToken<List<Note>>(){}.getType();
    }
    
    if ("Notes".equalsIgnoreCase(className)) {
      return new TypeToken<List<Notes>>(){}.getType();
    }
    
    if ("Origin".equalsIgnoreCase(className)) {
      return new TypeToken<List<Origin>>(){}.getType();
    }
    
    if ("Point".equalsIgnoreCase(className)) {
      return new TypeToken<List<Point>>(){}.getType();
    }
    
    if ("Points".equalsIgnoreCase(className)) {
      return new TypeToken<List<Points>>(){}.getType();
    }
    
    if ("Stop".equalsIgnoreCase(className)) {
      return new TypeToken<List<Stop>>(){}.getType();
    }
    
    if ("StopLocation".equalsIgnoreCase(className)) {
      return new TypeToken<List<StopLocation>>(){}.getType();
    }
    
    if ("SystemInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<SystemInfo>>(){}.getType();
    }
    
    if ("TimeTableData".equalsIgnoreCase(className)) {
      return new TypeToken<List<TimeTableData>>(){}.getType();
    }
    
    if ("TimeTablePeriod".equalsIgnoreCase(className)) {
      return new TypeToken<List<TimeTablePeriod>>(){}.getType();
    }
    
    if ("TimetableInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<TimetableInfo>>(){}.getType();
    }
    
    if ("Trip".equalsIgnoreCase(className)) {
      return new TypeToken<List<Trip>>(){}.getType();
    }
    
    if ("TripList".equalsIgnoreCase(className)) {
      return new TypeToken<List<TripList>>(){}.getType();
    }
    
    if ("Vehicle".equalsIgnoreCase(className)) {
      return new TypeToken<List<Vehicle>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Arrival".equalsIgnoreCase(className)) {
      return new TypeToken<Arrival>(){}.getType();
    }
    
    if ("ArrivalBoard".equalsIgnoreCase(className)) {
      return new TypeToken<ArrivalBoard>(){}.getType();
    }
    
    if ("Color".equalsIgnoreCase(className)) {
      return new TypeToken<Color>(){}.getType();
    }
    
    if ("CoordLocation".equalsIgnoreCase(className)) {
      return new TypeToken<CoordLocation>(){}.getType();
    }
    
    if ("CreationDate".equalsIgnoreCase(className)) {
      return new TypeToken<CreationDate>(){}.getType();
    }
    
    if ("DateBegin".equalsIgnoreCase(className)) {
      return new TypeToken<DateBegin>(){}.getType();
    }
    
    if ("DateEnd".equalsIgnoreCase(className)) {
      return new TypeToken<DateEnd>(){}.getType();
    }
    
    if ("Departure".equalsIgnoreCase(className)) {
      return new TypeToken<Departure>(){}.getType();
    }
    
    if ("DepartureBoard".equalsIgnoreCase(className)) {
      return new TypeToken<DepartureBoard>(){}.getType();
    }
    
    if ("Destination".equalsIgnoreCase(className)) {
      return new TypeToken<Destination>(){}.getType();
    }
    
    if ("Direction".equalsIgnoreCase(className)) {
      return new TypeToken<Direction>(){}.getType();
    }
    
    if ("Geometry".equalsIgnoreCase(className)) {
      return new TypeToken<Geometry>(){}.getType();
    }
    
    if ("GeometryRef".equalsIgnoreCase(className)) {
      return new TypeToken<GeometryRef>(){}.getType();
    }
    
    if ("JourneyDetail".equalsIgnoreCase(className)) {
      return new TypeToken<JourneyDetail>(){}.getType();
    }
    
    if ("JourneyDetailRef".equalsIgnoreCase(className)) {
      return new TypeToken<JourneyDetailRef>(){}.getType();
    }
    
    if ("JourneyId".equalsIgnoreCase(className)) {
      return new TypeToken<JourneyId>(){}.getType();
    }
    
    if ("JourneyName".equalsIgnoreCase(className)) {
      return new TypeToken<JourneyName>(){}.getType();
    }
    
    if ("JourneyType".equalsIgnoreCase(className)) {
      return new TypeToken<JourneyType>(){}.getType();
    }
    
    if ("Leg".equalsIgnoreCase(className)) {
      return new TypeToken<Leg>(){}.getType();
    }
    
    if ("LiveMap".equalsIgnoreCase(className)) {
      return new TypeToken<LiveMap>(){}.getType();
    }
    
    if ("LocationList".equalsIgnoreCase(className)) {
      return new TypeToken<LocationList>(){}.getType();
    }
    
    if ("Note".equalsIgnoreCase(className)) {
      return new TypeToken<Note>(){}.getType();
    }
    
    if ("Notes".equalsIgnoreCase(className)) {
      return new TypeToken<Notes>(){}.getType();
    }
    
    if ("Origin".equalsIgnoreCase(className)) {
      return new TypeToken<Origin>(){}.getType();
    }
    
    if ("Point".equalsIgnoreCase(className)) {
      return new TypeToken<Point>(){}.getType();
    }
    
    if ("Points".equalsIgnoreCase(className)) {
      return new TypeToken<Points>(){}.getType();
    }
    
    if ("Stop".equalsIgnoreCase(className)) {
      return new TypeToken<Stop>(){}.getType();
    }
    
    if ("StopLocation".equalsIgnoreCase(className)) {
      return new TypeToken<StopLocation>(){}.getType();
    }
    
    if ("SystemInfo".equalsIgnoreCase(className)) {
      return new TypeToken<SystemInfo>(){}.getType();
    }
    
    if ("TimeTableData".equalsIgnoreCase(className)) {
      return new TypeToken<TimeTableData>(){}.getType();
    }
    
    if ("TimeTablePeriod".equalsIgnoreCase(className)) {
      return new TypeToken<TimeTablePeriod>(){}.getType();
    }
    
    if ("TimetableInfo".equalsIgnoreCase(className)) {
      return new TypeToken<TimetableInfo>(){}.getType();
    }
    
    if ("Trip".equalsIgnoreCase(className)) {
      return new TypeToken<Trip>(){}.getType();
    }
    
    if ("TripList".equalsIgnoreCase(className)) {
      return new TypeToken<TripList>(){}.getType();
    }
    
    if ("Vehicle".equalsIgnoreCase(className)) {
      return new TypeToken<Vehicle>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
